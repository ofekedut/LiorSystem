AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Example SAM template for HTTP API with Lambda integration

Parameters:
  PrefixParam:
    Type: String
    Default: 'prod'
    Description: 'Prefixs for environment (e.g., prod, dev, staging)'
  Stage:
    Type: String
    Default: 'Prod'

Globals:
  Function:
    Timeout: 30
    Environment:
      Variables:
        Prefix: !Ref PrefixParam
        MondayApiKey: "eyJhbGciOiJIUzI1NiJ9.eyJ0aWQiOjQ0MTYyMzM0MSwiYWFpIjoxMSwidWlkIjo2OTAxMjk3MSwiaWFkIjoiMjAyNC0xMS0yNlQxOTo0Mjo0Ni4wMDBaIiwicGVyIjoibWU6d3JpdGUiLCJhY3RpZCI6MjY1NzYwMTUsInJnbiI6ImV1YzEifQ.uyqvVWDoYcLq1p-jEgSMvLQIa4zt_pPiX4Hbx0B8Jpk"

Resources:
  HttpApi:
    Type: AWS::Serverless::HttpApi
    Properties:
      StageName: !Sub "${Stage}"
      AccessLogSettings:
        DestinationArn: !GetAtt AccessLogGroup.Arn
        Format: '{"requestId":"$context.requestId","ip":"$context.identity.sourceIp","requestTime":"$context.requestTime","httpMethod":"$context.httpMethod","routeKey":"$context.routeKey","status":"$context.status","protocol":"$context.protocol","responseLength":"$context.responseLength","integrationError":"$context.integrationErrorMessage"}'
      CorsConfiguration:
        AllowOrigins:
          - "*"
        AllowHeaders:
          - Authorization
          - Access-Control-Allow-Origin
          - Content-Type
          - isBase64Encoded
        AllowMethods:
          - GET
          - POST
          - PATCH
          - OPTIONS
          - DELETE
          - PUT

  AccessLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/http-api/${PrefixParam}-api-access-logs"
      RetentionInDays: 7

  LiorAssistantFunction:
    Type: AWS::Serverless::Function
    Properties:
      MemorySize: 512
      Layers:
        - arn:aws:lambda:eu-central-1:770693421928:layer:Klayers-p312-arm64-requests:8
      CodeUri: functions/
      Handler: app.lambda_handler
      Runtime: python3.12
      Architectures:
        - arm64
      Policies:
        - AWSLambdaBasicExecutionRole
        - AmazonS3FullAccess
        - AmazonBedrockFullAccess
        - AmazonDynamoDBFullAccess
      Events:
        Entry:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Path: /{proxy+}
            Method: ANY

Outputs:
  ServerUrl:
    Description: "API Gateway endpoint URL for Dev stage"
    Value: !Sub "https://${HttpApi}.execute-api.${AWS::Region}.amazonaws.com/${Stage}/"


